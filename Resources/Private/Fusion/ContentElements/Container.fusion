prototype(Jonnitto.ImagesInARow:Container) < prototype(Neos.Neos:ContentCollection) {
    baseWidth = ${Configuration.setting('Jonnitto.ImagesInARow.baseWidth')}
    container = ${Configuration.setting('Jonnitto.ImagesInARow.container')}
    nodePath = ''

    childCount = ${q(node).children('[instanceof Jonnitto.ImagesInARow:Image]').count()}
    dimensionsWidth = ${this.childCount ? this.baseWidth / this.childCount : this.baseWidth}

    contentElement = true
    namespace = 'jonnitto-imagesinarow'

    @context {
        container = ${this.container}
        dimensionsWidth = ${this.dimensionsWidth}
        contentElement = ${this.contentElement}
        namespace = ${this.namespace}
    }

    attributes.class = Neos.Fusion:RawArray {
        namespace = ${container || node.context.inBackend ? false : namespace}
        row = ${namespace + '__row'}
    }

    @process {
        containerWrapping = Neos.Fusion:Tag {
            @if.needWrapping = ${container || node.context.inBackend}
            attributes.class = Neos.Fusion:RawArray {
                namespace = ${namespace}
                imagesinarow = ${container ? namespace + '__container' : false}
                container = ${Type.isString(container) ? container : false}
            }
            content = ${value}
        }
        contentElementWrapping {
            @if.contentElementWrapping = ${contentElement}
            expression = Neos.Neos:ContentElementWrapping
            @position = 'end 999999999'
        }
    }
    @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}
