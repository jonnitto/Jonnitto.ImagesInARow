prototype(Jonnitto.ImagesInARow:Container) < prototype(Neos.Neos:ContentComponent) {
    contentElement = true

    lazy = ${Configuration.setting('Jonnitto.ImagesInARow.lazy')}
    renderAsPicture = ${Configuration.setting('Jonnitto.ImagesInARow.renderAsPicture')}
    baseWidth = ${Configuration.setting('Jonnitto.ImagesInARow.baseWidth')}
    container = ${Configuration.setting('Jonnitto.ImagesInARow.container')}
    gutter = ${Configuration.setting('Jonnitto.ImagesInARow.gutter')}
    childCount = ${q(node).children('[instanceof Jonnitto.ImagesInARow:Image]').count()}
    counter = Neos.Fusion:Reduce {
        items = ${q(node).children('[instanceof Jonnitto.ImagesInARow:Image]')}
        itemReducer = Neos.Fusion:Value {
            initialValue = 0
            image = ${q(item).property('image')}
            ratio = ${this.image && this.image.height ? (this.image.width / this.image.height) : 1.5}
            value = ${carry + this.ratio}
        }
    }
    dimensionsWidth = ${this.childCount ? (this.baseWidth - (this.childCount - 1) * this.gutter) / this.counter : this.baseWidth}

    containerClass = ${[BEM.modifier('jonnitto-imagesinarow', 'container'), Type.isString(this.container) ? this.container : null]}
    class = ${this.container ? 'jonnitto-imagesinarow__row' : BEM.modifier('jonnitto-imagesinarow', 'row')}
    style = ${'--gutter:' + this.gutter + 'px'}
    inBackend = ${node.context.inBackend}
    warning = ${this.inBackend ? Translation.translate('noImages', 'Please add some images', [], 'NodeTypes/Container', 'Jonnitto.ImagesInARow') : null}

    @if.hasChildren = ${this.childCount || this.inBackend}

    @private {
        fileLoader = Carbon.FileLoader:Component {
            package = 'Jonnitto.ImagesInARow'
            css = ${[props.inBackend ? 'Backend.css' : null, 'Frontend.css']}
        }
        fileLoaderAsAttributes = ${!Type.isString(private.fileLoader)}
    }

    renderer = afx`
        <Carbon.Eel:Tag tagName={props.container ? 'div' : null} attributes.class={props.containerClass}>
            <div data-warning={props.warning} class={props.class} style={props.style} {...(private.fileLoaderAsAttributes ? private.fileLoader : {})} >
                <Neos.Neos:ContentCollectionRenderer />
                {private.fileLoaderAsAttributes ? '' : private.fileLoader}
            </div>
        </Carbon.Eel:Tag>
    `

    @context {
        contentElement = ${this.contentElement}
        baseWidth = ${this.baseWidth}
        dimensionsWidth = ${this.dimensionsWidth}
        lazy = ${this.lazy}
        renderAsPicture = ${this.renderAsPicture}
    }
    @process.contentElementWrapping.@if.contentElementWrapping = ${contentElement}
    @cache {
        mode = 'cached'
        entryIdentifier {
            collection = ${node}
        }
        entryTags {
            1 = ${Neos.Caching.descendantOfTag(node)}
            2 = ${Neos.Caching.nodeTag(node)}
        }
        maximumLifetime = ${q(node).context({'invisibleContentShown': true}).children().cacheLifetime()}
    }
    @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}
