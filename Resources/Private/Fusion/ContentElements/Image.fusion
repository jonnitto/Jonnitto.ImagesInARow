prototype(Jonnitto.ImagesInARow:Image) < prototype(Carbon.Image:Tag) {
    asset = ${q(node).property('image')}
    relation = ${this.asset && this.asset.height ? (this.asset.width / this.asset.height) : 1}
    maximumWidth = ${dimensionsWidth && this.asset ? Math.ceil(dimensionsWidth * this.relation) : false}
    alternativeText = ${q(node).property('alternativeText')}
    title = ${q(node).property('title')}
    link = ${q(node).property('link')}
    lightbox = ${q(node).property('lightbox')}
    caption = ${q(node).property('caption')}
    additionalClass = 'jonnitto-imagesinarow__image'

    contentElement = true

    @context {
        relation = ${this.relation}
        additionalClass = ${this.additionalClass}
        contentElement = ${this.contentElement}
    }

    prototype(Carbon.Link:Attributes) {
        additionalClass = ${additionalClass}
        style = ${'flex:' + relation + ' 1 0%;'}
    }

    prototype(Carbon.Image:Lightbox.Attributes) {
        additionalClass = ${additionalClass}
        style = ${'flex:' + relation + ' 1 0%;'}
    }

    @process {
        wrap = Neos.Fusion:Tag {
            @if.hasNoLinkOrLightox = ${node.context.live && (link || lightbox) ? false : true}
            attributes {
                class = ${additionalClass}
                style = ${'flex:' + relation + ' 1 0%;'}
            }
            content = ${value}
        }
        contentElementWrapping {
            @if.contentElementWrapping = ${contentElement}
            expression = Neos.Neos:ContentElementWrapping
            @position = 'end 999999999'
        }
    }

    @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'
}
